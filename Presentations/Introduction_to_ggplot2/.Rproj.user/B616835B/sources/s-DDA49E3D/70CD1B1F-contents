---
title: "Visualization with ggplot2"
#author: "Anthony Tyler"
#date: "07/25/2018 (updated: `r format(Sys.Date(),'%m/%d/%Y')`)"
output:
  xaringan::moon_reader:
    lib_dir: libs
  #  css: ["default"] #,"tamu"]
    nature:
      highlightStyle: github
      highlightLines: true
      countIncrementalSlides: false
      beforeInit: "custom.js"
    chakra: "remark-latest.min.js"
---
# Installing the needed packages

A lot of this course makes use of a special group of R packages referred to as the *tidyverse*.  The *tidyverse* is a set of packages that work in harmony with each other because they share a common design. 

To install the *tidyverse* on your machine, run this command from your console. 

```{r eval=FALSE}
install.packages("tidyverse")
```

You won't need to run this command again on this machine. 

--

Open up a new R script in your RStudio window. 

---
# Loading the Package

In order to access any of the functions, we need to first load the library into the R session.  You'll always need to do this first whenever using ggplot. 

```{r}
library(ggplot2)
```

--

For these practice problems, we're going to make use of a dataset that is built into ggplot called `mpg`.

Use the help feature of RStudio to read about what this data set represents. 

--

```{r eval=FALSE} 
?mpg 
```

You can also use RStudio's View() function to get an idea of what is actually in this dataset. 

---
# ggplot2 Basics

**ggplot2** is based on the **grammar of graphics**, the idea that you can build every graph from the same few components:
- a data set
- a set of geoms (visual marks that represent data points)
- a coordinate system

![:scale 70%](3comps.png)

To display the data values, we map variables in the data set to aesthetic properties of the geom like **size**, **color**, and **x**/**y** locations. 

---
# Our first plot

Run the following command in your R Console. 

```{r fig.width=8,fig.height=5,eval=FALSE}
ggplot(mpg, aes(x=displ,y=hwy)) +
  geom_point()
```

--

```{r fig.width=7,fig.height=5,echo=FALSE}
ggplot(mpg, aes(x=displ, y=hwy)) +
  geom_point()
```

---
# Structure of a call to ggplot

```{r eval=FALSE}
ggplot(                     )

```

Note that we first called ggplot. 
---
# Structure of a call to ggplot

```{r eval=FALSE}
ggplot(mpg,                 )

``` 

Note that we first called ggplot.

The first argument is the name of the dataset.

---
# Structure of a call to ggplot

```{r eval=FALSE}
ggplot(mpg,aes(x=displ,y=hwy))

```

Note that we first called ggplot.

The first argument is the name of the dataset.

The second argument is a call to aes()

---
# Aesthetics

Aesthetics are mappings of visual attributes of the graph to variables.  There are many different aesthetics, but the ones we will most commonly use are: 
- x, y
- color, fill
- linetype
- etc.

---
# Structure of a call to ggplot

```{r eval=FALSE}
ggplot(mpg,aes(x=displ,y=hwy)) +
  geom_point()
```

Note that we first called ggplot.

The first argument is the name of the dataset.

The second argument is a call to aes()

We then add a layer to the graph.  Layers are specific types of geoms.

--

Other geoms include: 
- geom_density()
- geom_dotplot()
- geom_histogram()
- geom_bar()
- geom_boxplot()
- etc.

---
class: inverse, center, middle
# You try!

## See if you can construct a scatterplot between the city miles per gallon and the highway miles per gallon in the mpg dataset.

---
# Try another!

## R has a built-in dataset by the name of `faithful`.  View the help file description of the dataset, and use the View() function to inspect it. 

## Construct a scatterplot of eruptions vs waiting

---
# Adding labeling

Using the `labs()` function we can add a layer of labels.

We can create a title and x/y-axis labels quite easily!
```{r fig.width = 4,fig.height=3}
ggplot(faithful,aes(x=eruptions,y=waiting)) + 
  geom_point() +
  labs(x="Eruption time in minutes",
       y="Time between eruptions in minutes",
       title="Eruption Time vs Waiting time (in minutes)", 
       caption="based on data from Yellowstone National Park, Wyoming, USA")
```

---
# Aesthetic fun

We can map a 3rd dimension onto our scatterplot through use of **color**.

```{r fig.width=8,fig.height=5, eval=FALSE}
ggplot(mpg,aes(x=displ,y=hwy,color=class)) +
  geom_point()
```

--

```{r fig.width=8,fig.height=5,echo=FALSE}
ggplot(mpg,aes(x=displ,y=hwy,color=class)) +
  geom_point()
```




